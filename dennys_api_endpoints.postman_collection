{
	"info": {
		"_postman_id": "26fd6b3c-75d1-43cd-ae84-a812ffd9ba37",
		"name": "Blog API EndPoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19863227"
	},
	"item": [
		{
			"name": "Register a new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it shold register a new user with valid data', () => {\r",
							"    pm.response.to.have.status(201)\r",
							"    const {user} = pm.response.json()\r",
							"    pm.expect(user).to.not.null\r",
							"    pm.expect(user.id).to.greaterThan(0)\r",
							"})\r",
							"\r",
							"var resposta = pm.response.json();\r",
							"pm.collectionVariables.set('userEmail', resposta.user.email);\r",
							"pm.collectionVariables.set('userId', resposta.user.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//const email = 'dennys.${new Date().getTime()}@email.com'\r",
							"//pm.collectionVariables.set('userEmail', email)\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{$randomFirstName}} {{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"Senha1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register a user invalid password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should not register a user with an invalid password', () => {\r",
							"    pm.response.to.have.status(400)\r",
							"    const {messages} = pm.response.json()\r",
							"    pm.expect(messages[0]).to.equal('Password must contain at least 8 characters, 1 uppercase character, and 1 digit')\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{$randomFirstName}} {{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"12345\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authenticate a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const { authorized, token } = pm.response.json()\r",
							"pm.collectionVariables.set('token', token)\r",
							"\r",
							"pm.test('it should authenticate a user with valid credentials', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"    pm.expect(authorized).to.equal(true)\r",
							"    pm.expect(token).to.have.length.greaterThan(0)\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{userEmail}}\",\r\n  \"password\": \"Senha1234\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register a new post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const { post } = pm.response.json()\r",
							"pm.collectionVariables.set('postId', post.id)\r",
							"\r",
							"pm.test('it shold register a new post with valid data', () => {\r",
							"    pm.response.to.have.status(201)\r",
							"    pm.expect(post).to.not.null\r",
							"    pm.expect(post.id).to.greaterThan(0)\r",
							"})\r",
							"\r",
							"//var resposta = pm.response.json();\r",
							"//pm.collectionVariables.set('userEmail', resposta.user.email);\r",
							"//pm.collectionVariables.set('userId', resposta.user.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//const email = 'dennys.${new Date().getTime()}@email.com'\r",
							"//pm.collectionVariables.set('userEmail', email)\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"{{$randomProductName}}\",\r\n  \"content\": \"{{$randomCatchPhrase}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieves a post by its id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should retrieve a previosly registered post by its id', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"    const { post } = pm.response.json()\r",
							"    pm.expect(post).to.not.null\r",
							"    const postId = pm.collectionVariables.get('postId')\r",
							"    pm.expect(post.id).to.equal(postId)\r",
							"})\r",
							"\r",
							"//var resposta = pm.response.json();\r",
							"//pm.collectionVariables.set('userEmail', resposta.user.email);\r",
							"//pm.collectionVariables.set('userId', resposta.user.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/posts/{{postId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						"{{postId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a post by its id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should delete a previosly registered post by its id', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"    const { message } = pm.response.json()\r",
							"    pm.expect(message).to.equal('Post deleted')\r",
							"    //const postId = pm.collectionVariables.get('postId')\r",
							"    //pm.expect(post.id).to.equal(postId)\r",
							"})\r",
							"\r",
							"//var resposta = pm.response.json();\r",
							"//pm.collectionVariables.set('userEmail', resposta.user.email);\r",
							"//pm.collectionVariables.set('userId', resposta.user.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/posts/{{postId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						"{{postId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a user by email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should delete a previosly registered user by its email', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"    const { message } = pm.response.json()\r",
							"    pm.expect(message).to.equal('User deleted')\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userEmail}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userEmail}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "userEmail",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "postId",
			"value": ""
		}
	]
}